<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>axios get与post请求</title>
    <url>/posts/9143/</url>
    <content><![CDATA[<h2 id="axios-get与post请求">axios get与post请求</h2>
<h4 id="get请求">get请求</h4>
<p><em>/api</em>:url地址</p>
<p><em>params</em>:{}中写参数</p>
<p><em>response</em>:处理返回结果</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">'/api'</span>, {</span><br><span class="line">                <span class="attr">params</span>: {</span><br><span class="line">                    <span class="attr">content</span>:<span class="string">''</span></span><br><span class="line">                },</span><br><span class="line">            }).<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">                })</span><br></pre></td></tr></table></figure></div>
<h4 id="post请求">post请求</h4>
<p>qs.stringify()将对象
序列化成URL的形式，以&amp;进行拼接（需要导入qs模块）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">'/api/api/login'</span>, qs.<span class="title function_">stringify</span>(</span><br><span class="line">                                {</span><br><span class="line">                                        <span class="attr">content</span>:<span class="string">""</span></span><br><span class="line">                                }),</span><br><span class="line">                                {</span><br><span class="line">                                    <span class="attr">headers</span>: {</span><br><span class="line">                                        <span class="string">"CSRF-token"</span>:<span class="string">""</span></span><br><span class="line">                                        <span class="comment">//headers发送cookies信息</span></span><br><span class="line">                                    }</span><br><span class="line">                                }, )</span><br><span class="line">                            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">                                <span class="comment">//处理返回信息</span></span><br><span class="line">                            });</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>axios的基本使用</title>
    <url>/posts/55319/</url>
    <content><![CDATA[<h2 id="axios的基本使用">axios的基本使用</h2>
<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js
中。</p>
<p>最简单的axios写法如下</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">'url'</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  });</span><br></pre></td></tr></table></figure></div>
<p>这样我们就可以完成一个简单的get请求，但是在大多数情况下，我们总是会遇到跨域相关的问题。</p>
<h3 id="什么是跨域">什么是跨域</h3>
<p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制。</p>
<p>最常见的就是当域名不同时（如下）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.abc.com 访问 www.def.com</span><br></pre></td></tr></table></figure></div>
<p>有的网站会在服务端写好，这样我们请求接口时就不会遇到跨域的问题，但是大多数并不会，也就是为什么在看相关教程时看着老师可以直接请求数据，但是自己照着写时却突然蹦出来了跨域的问题（老师自己写的接口，在服务端就解决了跨域的问题）。</p>
<h3 id="如何解决跨域问题">如何解决跨域问题</h3>
<p>这里分为vue cli2与 vue
cli3/4的解决方法，因为配置文件发生了相应的改变所以有一些小的变动，网上大多数的解决方法都是cli2放在cli3/4是不可行的。</p>
<h4 id="step1">STEP1</h4>
<p>修改/创建配置文件</p>
<h5 id="vue-cli2">vue cli2</h5>
<p>将config文件夹下的index.js打开，写入代码如下</p>
<p>注意这里不要改成es6语法，具体为啥我还不是特别清楚，官方文档是这样写的，我改成es6是没法正常运行的。。。详情见：<a class="link" href="https://cli.vuejs.org/zh/config/">Vue官方文档：配置参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>注意devServe，也就是说只能在开发环境下实现跨域，打包后在生产环境下无法实现跨域</p>
<p>为什么这样写可以实现跨域？上面的链接中devServer.proxy有详细说到~</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">devServer</span>: {</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">'/api'</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">'https://url.com'</span>, <span class="comment">//对应自己的接口</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: {</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//这里的名字可以自定义（api）</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h5 id="vue-cli34">vue cli3/4</h5>
<p>直接在根目录下修改或者创建vue.config.js（名字是固定的！官方就是这么规定的，其他名字不会生效），写入的代码同上</p>
<h4 id="step2">STEP2</h4>
<p>创建一个js文件名字随意，大致代码如下</p>
<p>axios更多的实例请求配置详见：<a class="link" href="https://www.kancloud.cn/yunye/axios/234845">Axios中文说明 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) {</span><br><span class="line">  创建一个axios实例</span><br><span class="line">    <span class="keyword">var</span> instance = axios.<span class="title function_">create</span>({</span><br><span class="line">        <span class="attr">method</span>: <span class="string">'get'</span>,<span class="comment">//传输方式（get/post）</span></span><br><span class="line">        <span class="attr">params</span>: {</span><br><span class="line">          <span class="comment">//需要传递的参数写在这里</span></span><br><span class="line">          <span class="attr">name</span>:<span class="string">'jhao'</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">headers</span>: {</span><br><span class="line">            <span class="string">'content-type'</span>: <span class="string">'text/plain:charset=UTF-8'</span></span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">instance</span>(config)<span class="comment">//返回参数</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h4 id="step3">STEP3</h4>
<p>在main.js中导入STEP2的文件</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">'./api/request'</span></span><br><span class="line"><span class="comment">//换成自己的js文件</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(<span class="string">'/api/cgi-bin/musicu.fcg'</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>{</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">})</span><br></pre></td></tr></table></figure></div>
<h4 id="结束">结束</h4>
<p>到这里在开发环境中的跨域请求就解决了，要在生产环境中使用还需要一点其他的配置，以后再写。小白个人的学习总结，可能会存在一些技术知识上的认知错误，欢迎指出，大佬轻喷、轻喷~</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>WIFI杀手制作</title>
    <url>/posts/3560/</url>
    <content><![CDATA[<h1 id="wifi杀手">WIFI杀手！</h1>
<p>高中十分喜欢的一个小玩意，拿出来记录一下，百度上教程比较少，也比较杂乱，那就自己写一个吧。</p>
<h3 id="制作工具">制作工具</h3>
<p>既然高中都能做，那也可想而知，制作成本很低，而且容易操作，手机也可以完成刷入WIFI杀手的一系列操作</p>
<ol type="1">
<li>esp8266开发板一个（4MB的版本，外接天线或者不外接天线的均可，但一定要是4Mb版本的）</li>
<li>一台电脑或者手机（手机就在这里不讲了，手机也可以做但是比电脑麻烦一点</li>
<li>一根可以数据线（有的线只支持充电，不支持传输数据，遇到这种情况换一根就好了，不过现在这种情况也很少了）</li>
</ol>
<p>准备好这些我们就可以开始WIFI杀手的制作啦</p>
<h3 id="刷入wifi杀手固件">刷入WIFI杀手固件</h3>
<p>做这些准备工作之前，先下载</p>
<ol type="1">
<li>首先，将esp8266连接电脑，这时esp8266会常亮蓝灯</li>
<li>解压我发的文件，如下图所示<img lazyload="" src="/images/loading.svg" data-src="/img/esp8266/1.png">
<strong>安装烧录工具文件夹里的应用程序</strong>，现在的电脑一般是54位的，除了一些学校的机房可能还是32位，实在不清楚自己电脑的话，百度一下</li>
</ol>
<p><strong>注意一下另一个文件就是WIFI杀手的固件</strong></p>
<ol start="3" type="1">
<li>现在打开烧录工具，应该看到如下界面<img lazyload="" src="/images/loading.svg" data-src="/img/esp8266/2.png">可能你们的端口不是COM3，也可能时COM4，这个无所谓，只要是插esp8266的那个口就行，要是烧录失败了，就换另外一个口呗，或者自己查一下esp8266插的是哪个口</li>
<li>现在点击Config，然后点击那个齿轮，选择刚刚的WIFI烧录固件<img lazyload="" src="/images/loading.svg" data-src="/img/esp8266/3.png"></li>
<li>然后点击Advanced，将参数修改为如下图所示<img lazyload="" src="/images/loading.svg" data-src="/img/esp8266/4.png"></li>
<li>最后再点Operation，Flash刷入就ok（在刷入的过程中，esp8266会蓝灯闪烁为正常现象，刷完后，不闪烁）</li>
</ol>
<p>就此固件刷入成功！</p>
<h3 id="wifi杀手的使用">WIFI杀手的使用</h3>
<ol type="1">
<li>下载我发的那个文件夹里的app安装</li>
<li>打开app看到如下界面<img lazyload="" src="/images/loading.svg" data-src="/img/esp8266/5.jpg"></li>
<li>汉化版的，我就讲一下大概过程吧，搜索WIFI-&gt;选定用户-&gt;选择攻击方式-&gt;攻击
模拟信号的话直接在攻击目录下输入参数模拟即可
esp8266很强大，其他有趣的固件和做法可以自己尝试一下~</li>
</ol>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>frp更新后的配置文件写法变更</title>
    <url>/posts/1/</url>
    <content><![CDATA[<p>从 v0.52.0 版本开始，frp 开始支持 TOML、YAML 和 JSON
作为配置文件格式</p>
<p>v0.52.0版本前，frp使用.ini作为配置文件的格式，基本配置如下：</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = &lt;server_host&gt;</span><br><span class="line"><span class="attr">server_port</span> = &lt;server_port&gt;</span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称，在服务器端不能重复</span></span><br><span class="line"><span class="section">[app_http]</span></span><br><span class="line"><span class="attr">type</span>=tcp</span><br><span class="line"><span class="comment"># 需要转发的本地ip，可以改成局域网的ip做转发</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment"># 需要转发的本地端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">remote_port</span> = &lt;remort_port_1&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">[app_https]</span></span><br><span class="line"><span class="attr">type</span>=tcp</span><br><span class="line"><span class="attr">local_ip</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> =<span class="number">443</span></span><br><span class="line"><span class="attr">remote_port</span>=&lt;remort_port_2&gt;</span><br></pre></td></tr></table></figure></div>
<p>由于更新后ini文件被弃用，但网上依旧有很多的文章在写之前的配置，没有标注版本，导致出现配置文件在不同版本间混用的情况，导致莫名的bug（大多会提示ini文件已被弃用的提示）</p>
<p>如果在 v0.52.0
以后的版本中，使用如[common]的这种写法，即使文件为.toml文件，也会被frp当作ini文件进行处理</p>
<p>所以按照按照官方文档的示例，以后的版本配置文件应如以下代码所示</p>
<div class="highlight-container" data-rel="Toml"><figure class="iseeu highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">serverAddr</span> = <span class="string">"x.x.x.x"</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"ssh"</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">"tcp"</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">"xxxxx"</span></span><br></pre></td></tr></table></figure></div>
<p>参考链接</p>
<blockquote>
<p><a class="link" href="https://gofrp.org/zh-cn/docs/features/common/configure/">frp官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><a class="link" href="https://github.com/fatedier/frp/blob/dev/conf/frpc_full_example.toml">frpc_full_example.toml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><a class="link" href="https://github.com/fatedier/frp/issues/3724">toml配置问题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用</title>
    <url>/posts/60077/</url>
    <content><![CDATA[<h1 id="github使用">GitHub使用</h1>
<h3 id="什么是github">什么是GitHub</h3>
<p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git
作为唯一的版本库格式进行托管，故名GitHub。作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。
如前所述，作为一个分布式的版本控制系统，在Git中并不存在主库这样的概念，每一份复制出的库都可以独立使用，任何两个库之间的不一致之处都可以进行合并。（论百度百科的重要性）</p>
<h3 id="创建仓库">创建仓库</h3>
<ol type="1">
<li><a class="link" href="https://github.com">Github传送门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，进入网站注册账号，进入主页后，点击New，如下图<img lazyload="" src="/images/loading.svg" data-src="/img/github/1.png"></li>
<li>创建仓库，Repository name处写仓库名，然后创建即可</li>
</ol>
<h3 id="安装git">安装git</h3>
<ol type="1">
<li><a class="link" href="https://git-scm.com/downloads">git下载传送门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,下载完成后一路next即可</li>
<li>安装成功后，打开Git
Bash会弹出一个类似于命令的窗口，安装成功后在窗口输入</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name "Your Name"</span><br><span class="line">$ git config --global user.email "email@example.com"</span><br></pre></td></tr></table></figure></div>
<p>你的名字和邮箱</p>
<h3 id="创建本地仓库">创建本地仓库</h3>
<ol type="1">
<li>创建一个空文件夹然后输入</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br></pre></td></tr></table></figure></div>
<p>learnfit就是你之前在GitHub创建的仓库名 2. 通过git
init命令把这个目录变成Git可以管理的仓库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></div>
<ol start="3" type="1">
<li>这时候在空目录下创建一个readme.txt,内容随意，规范一下可以写成</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure></div>
<ol start="4" type="1">
<li>git add,把文件添加到仓库</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure></div>
<p>5.git commit，将文件提交到仓库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m "wrote a readme file"</span><br></pre></td></tr></table></figure></div>
<p>-m后面输入的是本次提交的说明，可以输入任意内容</p>
<h3 id="远程仓库">远程仓库</h3>
<ol type="1">
<li>创建ssh key</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C "youremail@example.com"</span><br></pre></td></tr></table></figure></div>
<p>记得把邮箱改成自己的，然后再用户目录就应该可以找到.ssh的文件夹（主用户目录：C盘下用户的文件夹，然后打开你用户名的文件夹），里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH
Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<ol start="2" type="1">
<li>填写ssh key 登陆GitHub，点击setting，打开“SSH
Keys”页面：然后，点“New SSH
Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。<img lazyload="" src="/images/loading.svg" data-src="/img/github/2.png">
现在就可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
3.现在在本地仓库运行命令</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:username/xxx.git</span><br></pre></td></tr></table></figure></div>
<p>username改成自己的用户名，git就是你刚刚创建的仓库名（其实这些命令创建仓库后GitHub就会提示你）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></div>
<p>这样就推送完成了，以后的上传分为git add，git commit，git push</p>
<p>我讲的没有那么详细也可以看看<a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Github无法访问问题解决</title>
    <url>/posts/47938/</url>
    <content><![CDATA[<h1 id="github竟拒我于门外">Github竟拒我于门外</h1>
<h3 id="手机可以访问但电脑不可以">手机可以访问但电脑不可以？</h3>
<p>至于为什么有了这篇帖子咱们还得从一只蝙蝠说起...</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/17bf778d9f5e9a4eff93d7edc496dd1a.jpg"></p>
<p>从过年之后就再也没踏出过家门一步，吃了睡睡了吃的日子到了今天发现有一丝丝的颓废，于是满心欢喜的打开vs
code写写代码，git命令到git push却发现无法提交。</p>
<p>于是我电脑尝试打开官网看看居然得到如下结果 <img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/1.webp">
第一时间想到是不是要挂小飞机了，但是打开还是无济于事，抱着试一试的心态我用手机打开了GitHub的官网？？？手机没挂小飞机也能进？</p>
<h3 id="解决办法">解决办法</h3>
<p>于是在网上找了各种办法，最后看到了一个靠谱的办法就是修改host文件（文件路径：C:）
将一下ip粘贴到hosts文件就可以了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.30.253.113 github.com</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">192.30.253.118 gist.github.com</span><br><span class="line">192.30.253.119 gist.github.com</span><br></pre></td></tr></table></figure></div>
<p>与此同时问题就又来了，居然保存不了！他还给亲切的提示了你没有权限保存，请向管理员申请。自己管自己？<img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/1.jpg"></p>
<p>各种说通过右键属性更改权限的办法都试了，但是都没用。</p>
<p>最后一个有效的办法就是右键win的图标，找到Windows
PowerSheell（管理员）注意是<strong>管理员</strong>！然后输入"notepad
hosts"即可编辑保存了。 到此这个问题就完美解决啦</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise用法详解</title>
    <url>/posts/promise-usage/</url>
    <content><![CDATA[<h2 id="什么是promise">什么是Promise</h2>
<p>Promise是一个对象，代表了异步操作的最终完成或者失败。</p>
<p>下图为MDN中的Promise流程图</p>
<p>Promise存在三种状态分别为：</p>
<blockquote>
<p>其中fulfill和reject状态也被称之为已敲定（settled），即非pending状态</p>
</blockquote>
<ul>
<li>pending（等待中）：初始状态，还没有确定的结果</li>
<li>fulfill（已兑现）：成功状态，操作已完成</li>
<li>reject（已拒绝）：失败状态，操作未完成</li>
</ul>
<p>‍</p>
<p>​<img lazyload="" src="/images/loading.svg" data-src="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="image">​</p>
<h2 id="thenable">thenable</h2>
<p><a class="link" href="https://promisesaplus.com/">Promises/A+ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>对于thenable的定义是：一个定义
then 方法的对象或函数</p>
<p>例如：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">thenableFn</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> [</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">'thenableFn Success'</span>)</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thenableobj = {</span><br><span class="line">    <span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">'thenableFn Success'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">thenableFn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//thenableFn Success</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">thenableobj.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//thenableFn Success</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure></div>
<h2 id="promise中的方法有哪些">Promise中的方法有哪些</h2>
<h3 id="实例方法">实例方法</h3>
<h4 id="then">then</h4>
<p><strong>then</strong>方法接受两个参数，分别用于Promise在fulfilled与reject情况下的回调函数，then也会返回一个promise对象，这也就是为什么可以实现链式调用的原因</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">'resolved1'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// resolved1</span></span><br><span class="line">  <span class="comment">// 即使返回的是一个字符串，then也会将其包裹在一个promise中返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'resolved2'</span>;</span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// resolved2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'resolved3'</span>;</span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// resolved3</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<h4 id="catch">catch</h4>
<p><strong>catch</strong>是在promise被拒绝时使用的一个函数，它也会返回一个promise对象。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">reject</span>(<span class="string">'error'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'first then:'</span>, res); <span class="comment">//因为reject，所以此处的代码不会执行</span></span><br><span class="line">}).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">//error</span></span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'second then:'</span>, res); <span class="comment">//second then:undefined</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure></div>
<h4 id="finally">finally</h4>
<p><strong>finally</strong>在promise敲定（settled，无论是resolve还是reject）后执行,同时它也返回一个promise，在后面依旧可以进行链式调用。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">reject</span>(<span class="string">'error'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'first then:'</span>, res); <span class="comment">//因为reject，所以此处的代码不会执行</span></span><br><span class="line">}).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">//error</span></span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'second then:'</span>, res); <span class="comment">//second then:undefined</span></span><br><span class="line">}).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'finally'</span>); <span class="comment">//finally</span></span><br><span class="line">}).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'third then:'</span>, res); <span class="comment">//third then:undefined</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<h3 id="静态方法">静态方法</h3>
<h4 id="reslove">reslove</h4>
<p>返回一个promise对象，并附带兑现的值</p>
<h4 id="reject">reject</h4>
<p>返回一个promise对象，并附带拒绝的原因</p>
<h4 id="all">all</h4>
<p>接收一个promise可迭代对象，并返回一个promise。在所有传入的promise兑现后，返回一个包含所有promise对象兑现值的数组；如果其中有promise被拒绝，那么返回第一个promise被拒绝的原因</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全都fulfilled时</span></span><br><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successA'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseB = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successB'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseC = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successC'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promiseA, promiseB, promiseC]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// [ 'successA', 'successB', 'successC' ]</span></span><br><span class="line">}).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其中有一个reject时</span></span><br><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successA'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseB = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">reject</span>(<span class="string">'errorB'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseC = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successC'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promiseA, promiseB, promiseC]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">}).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// errorB</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<h4 id="allsettled">allSettled</h4>
<p>接收一个promise的可迭代对象，返回每个promise结果描述的数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successA'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseB = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">reject</span>(<span class="string">'errorB'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseC = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">'successC'</span>);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([promiseA, promiseB, promiseC]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//[</span></span><br><span class="line"><span class="comment">//  { status: 'fulfilled', value: 'successA' },</span></span><br><span class="line"><span class="comment">//  { status: 'rejected', reason: 'errorB' },</span></span><br><span class="line"><span class="comment">//  { status: 'fulfilled', value: 'successC' }</span></span><br><span class="line"><span class="comment">//]</span></span><br></pre></td></tr></table></figure></div>
<h4 id="race">race</h4>
<p>接收一个promise可迭代对象，返回一个promise，哪个promise先敲定就先返回哪个（无论是resolve还是reject）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里就用mdn的例子了</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">'one'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">'two'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="comment">// 这里两个promise都被兑现了，但promise2的兑现时间更快</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果reject先执行，那么就会先返回reject</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">'one'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">'two'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>, <span class="string">'three'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">}).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// two</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<h4 id="any">any</h4>
<p>接收一个promise可迭代对象，返回第一个被兑现（resolve）promise的兑现值（会忽略之前的reject），如果所有promise都被拒绝，那么以数组的形式返回所有被拒绝的原因。</p>
<blockquote>
<p>如果文中有任何错误欢迎指正~还是建议直接看官网理解可能会更好</p>
</blockquote>
<p><a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise
- JavaScript | MDN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://promisesaplus.com/">Promises/A+ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://github.com/LinDaiDai/niubility-coding-js/blob/master/JavaScript/%E5%BC%82%E6%AD%A5/%E8%A6%81%E5%B0%B1%E6%9D%A545%E9%81%93Promise%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%E6%AC%A1%E7%88%BD%E5%88%B0%E5%BA%95.md">45道Promise题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>‍</p>
]]></content>
      <categories>
        <category>Frontnd</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/posts/41646/</url>
    <content><![CDATA[<h2 id="为什么选择hexo">为什么选择Hexo</h2>
<p>之前我也试过其他的博客系统，例如：typecho，wordpress等等，但是因为之前是高中，
也没有太多的精力去打理，这些博客都需要你有一台服务器或者是虚拟主机，还要一个域名。
自己没钱一下买一两年（当时也没必要，也不写啥东西）但是后来准备写的时候发现已经过期了。
重新买回来之后还是要重装一遍，而且之前的数据也没有了，但是hexo就不需要考虑这些啦。
你只需要在GitHub上有一个账号就足以。</p>
<h2 id="hexo是什么">Hexo是什么</h2>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用
Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="hexo搭建">Hexo搭建</h2>
<h3 id="安装git">1、安装git</h3>
<p>windows：到git官网下载安装即可，<a class="link" href="https://git-scm.com/downloads">Download git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，
下载安装成功后鼠标右键就可以看到有Git
Bash的命令行工具，以后使用git都在这进行。 安装成功后可以使用git
--version查看git版本。(别的系统我也没用过，就只讲windows啦)</p>
<h3 id="安装nodejs">2、安装Nodejs</h3>
<p><a class="link" href="http://nodejs.cn/download/">Node.js下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，根据需要下载安装即可，安装完成之后可以打开命令行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></div>
<p>可以检查一下是否安装成功，安装成功会显示版本号</p>
<h3 id="安装hexo">3、安装hexo</h3>
<p>首先创建一个文件夹，名字随意我这里就文件夹的名字就以blog来说了，打开你创建的文件夹，
右键点进git bash，输入以下命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>
<p>安装完后一样可以通过</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></div>
<p>查看是否安装成功</p>
<p>初始化hexo</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></div>
<p>这里的blog是在你刚刚创建的blog文件夹的子文件夹，名字随意 接下来</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<p>完成后大概会有以下文件，我的可能会多几个，不要在意，我后面又搞了其他东西</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200227161239.png"></p>
<p>接着继续命令行里输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>
<p>hexo -g意思是生成静态文件 hexo server启动服务 CTRL+c关闭服务
这时候浏览器输入localhost:4000就可以看到博客啦</p>
<h3 id="注册github创建仓库">4、注册GitHub创建仓库</h3>
<p><a class="link" href="https://github.com/">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>没有账号的话赶快去注册一个吧，
注册成功后创建一个仓库</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200227161927.png"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200227162056.png"></p>
<p>仓库的名字不能随意写，username.github.io,username是你的用户名，写完后点击Create
repository</p>
<h3 id="将ssh添加到github">5、将SSh添加到GitHub</h3>
<p>在命令行中输入以下内容（别照抄直接回车！）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name "name"</span><br><span class="line">git config --global user.email "email"</span><br></pre></td></tr></table></figure></div>
<p>name是你GitHub的用户名，Email是你GitHub的邮箱
然后创建ssh，一直回车就好了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C"email"</span><br></pre></td></tr></table></figure></div>
<p>这里的Email和上面的同理 现在你的电脑里就有一个.ssh的文件夹</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200227162818.png"></p>
<p>id_rsa是电脑的私人密钥，id_rsa.pub是公共密钥，当然是用公共密钥啦，现在将id_rsa.pub的内容复制到GitHub，
GitHub中在右上角打开setting，里面有SSH and GPG
keys点击后new一个，名字随意</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200227163223.png"></p>
<p>在gitbash中检查是否安装成功</p>
<h3 id="将hexo部署到github">6、将hexo部署到GitHub</h3>
<p>这时候打开刚刚的文件夹找到配置文件_config.yml，文件的最后修改为如下内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/UserName/UserName.github.io.git //username是你的用户名</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div>
<p>这里有两种方式一种是https一种是.git的方式，第一种每次需要输入用户名密码，第二种不需要。
现在安装部署命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>
<p>现在只要依次执行以下命令即可</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>
<p>hexo
c(clean)清除你之前生成的东西，最好每次清理一下，以免发生不必要的错误
hexo g(generate)生成静态文件 hexo d(deploy)部署文章 最后出现INFO Deploy
done:git就是部署成功了。现在打开http://username.github.io
（username是你的用户名）就可以看到你的博客啦 你的博客就成功部署了
关于hexo的更多操作可以加我询问哈~</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue cli 解决跨域 线上 nginx 反向代理配置</title>
    <url>/posts/61269/</url>
    <content><![CDATA[<h2 id="vue-cli-解决跨域-线上-nginx-反向代理配置">vue cli 解决跨域 线上
nginx 反向代理配置</h2>
<h4 id="开发环境跨域">1、开发环境跨域</h4>
<p>在<strong>vue
cli2</strong>中，在/config/index.js里找到proxyTable开启代理changeOrigin:ture;</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxyTable</span>: {</span><br><span class="line">    <span class="comment">//解决</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">"./"</span>,</span><br><span class="line">      <span class="string">'/api'</span>:{</span><br><span class="line">        <span class="attr">target</span>:<span class="string">'http://xx.com'</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>:{</span><br><span class="line">            <span class="string">'^/api'</span>:<span class="string">'/api'</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br></pre></td></tr></table></figure></div>
<p>在<strong>vue
cli3</strong>中的vue.config.js（如果没有可以自行创建。注：与package.json同级目录）修改</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">"./"</span>,</span><br><span class="line">  <span class="attr">devServer</span>: {</span><br><span class="line">    <span class="attr">proxy</span>: {</span><br><span class="line">      <span class="string">"/api"</span>: {</span><br><span class="line">        <span class="attr">target</span>: <span class="string">"http://xx.com"</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: {</span><br><span class="line">          <span class="string">"^/api"</span>: <span class="string">""</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<h4 id="nginx反向代理设置">2、nginx反向代理设置</h4>
<p>如果使用宝塔控制面板，请在当前站点文件夹下进行配置（位置如下图所示）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20200924151731.png"></p>
<p>在配置文件（xx.conf）的server{}中按需加入如下代码：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">location /api/ {</span><br><span class="line">        # 把 /api 路径下的请求转发给真正的后端服务器</span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//xx.xx.xx.xx:3000/;</span></span><br><span class="line">        #注意端口后需加/</span><br><span class="line"></span><br><span class="line">        # 把host头传过去，后端服务程序将收到your.<span class="property">domain</span>.<span class="property">name</span>, 否则收到的是<span class="attr">localhost</span>:<span class="number">8080</span></span><br><span class="line">        proxy_set_header <span class="title class_">Host</span> $http_host;</span><br><span class="line"></span><br><span class="line">        # 把cookie中的path部分从/api替换成/service</span><br><span class="line">        proxy_cookie_path /api /;</span><br><span class="line"></span><br><span class="line">        # 把cookie的path部分从<span class="attr">localhost</span>:<span class="number">8080</span>替换成your.<span class="property">domain</span>.<span class="property">name</span></span><br><span class="line">        proxy_cookie_domain <span class="attr">localhost</span>:<span class="number">80</span> <span class="attr">http</span>:<span class="comment">//xx.xx.xx.xx:3000/;</span></span><br><span class="line">    }</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【LeetCode】缀点成线</title>
    <url>/posts/check-if-it-is-a-straight-line/</url>
    <content><![CDATA[<p><a class="link" href="https://leetcode.cn/problems/check-if-it-is-a-straight-line/description/">【题目链接】1232.
缀点成线 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="题目描述">题目描述</h3>
<p>给定一个数组 coordinates ，其中 coordinates[i] = [x, y] ， [x, y]
表示横坐标为 x、纵坐标为 y
的点。请你来判断，这些点是否在该坐标系中属于同一条直线上。</p>
<h3 id="实现思路">实现思路</h3>
<ol type="1">
<li>如果每两个点的斜率相同，那么就能确定属于同一条直线上</li>
<li>从前两个点开始依次计算斜率并存入数组</li>
<li>所有斜率存入数组后，判断数组中的斜率是否相等，如果全部相等则属于同一条直线</li>
</ol>
<h3 id="具体代码">具体代码</h3>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> checkStraightLine = <span class="keyword">function</span>(<span class="params">coordinates</span>) {</span><br><span class="line">    <span class="keyword">const</span> slopeArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; coordinates.<span class="property">length</span> - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">let</span> dx = coordinates[i + <span class="number">1</span>][<span class="number">0</span>] - coordinates[i][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">let</span> dy = coordinates[i + <span class="number">1</span>][<span class="number">1</span>] - coordinates[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment">// 考虑如果x为零的情况，代表垂直的直线</span></span><br><span class="line">        <span class="keyword">let</span> slope = dx === <span class="number">0</span> ? <span class="string">'vertical'</span> : dy/dx</span><br><span class="line">        <span class="comment">// 将结果存入数组</span></span><br><span class="line">        slopeArr.<span class="title function_">push</span>(slope)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果所有值相等则为一条直线</span></span><br><span class="line">    <span class="keyword">return</span> slopeArr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === slopeArr[<span class="number">0</span>])</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Frontnd</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+element+阿里云oss图片上传</title>
    <url>/posts/63894/</url>
    <content><![CDATA[<h3 id="vueelement阿里云oss图片上传">vue+element+阿里云oss图片上传</h3>
<h4 id="npm安装ali-oss">1、npm安装ali-oss</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install ali-oss</span><br></pre></td></tr></table></figure></div>
<h4 id="使用element的-upload-组件进行上传">2、使用element的 upload
组件进行上传</h4>
<p><em>html部分如下</em></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"upload-demo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">action</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:http-request</span>=<span class="string">"fnUploadRequest"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">list-type</span>=<span class="string">"picture-card"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-preview</span>=<span class="string">"handlePictureCardPreview"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-remove</span>=<span class="string">"handleRemove"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"dialogVisible"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">:src</span>=<span class="string">"dialogImageUrl"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p><em>js部分如下</em></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">OSS</span> <span class="keyword">from</span> <span class="string">"ali-oss"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">dialogImageUrl</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">disabled</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">fileList</span>: [],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="title function_">handleRemove</span>(<span class="params">file, fileList</span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">handlePictureCardPreview</span>(<span class="params">file</span>) {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogImageUrl</span> = file.<span class="property">url</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    },</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fnUploadRequest</span>(<span class="params">option</span>) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"参数"</span>, option);</span><br><span class="line">        <span class="comment">// 获取OSS配置信息</span></span><br><span class="line">        <span class="keyword">let</span> client = <span class="keyword">new</span> <span class="title function_">OSS</span>({</span><br><span class="line">          <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">accessKeyId</span>: <span class="string">""</span>, <span class="comment">//阿里云AccessKey ID</span></span><br><span class="line">          <span class="attr">accessKeySecret</span>: <span class="string">""</span>, <span class="comment">//阿里云accessKeySecret</span></span><br><span class="line">          <span class="attr">bucket</span>: <span class="string">""</span>, <span class="comment">//bucket域名</span></span><br><span class="line">          <span class="attr">region</span>: <span class="string">""</span>, <span class="comment">//oss地区，如：oss-cn-beijing。（注：不用加.aliyun.com）</span></span><br><span class="line">        });</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//获取当前时间（为了保证不出现重复文件名导致文件覆盖）</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getFormatDate</span>(<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">          <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">var</span> strDate = date.<span class="title function_">getDate</span>();</span><br><span class="line">          <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) {</span><br><span class="line">            month = <span class="string">"0"</span> + month;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) {</span><br><span class="line">            strDate = <span class="string">"0"</span> + strDate;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">var</span> currentDate =</span><br><span class="line">            date.<span class="title function_">getFullYear</span>() +</span><br><span class="line">            <span class="string">"-"</span> +</span><br><span class="line">            month +</span><br><span class="line">            <span class="string">"-"</span> +</span><br><span class="line">            strDate +</span><br><span class="line">            <span class="string">" "</span> +</span><br><span class="line">            date.<span class="title function_">getHours</span>() +</span><br><span class="line">            <span class="string">":"</span> +</span><br><span class="line">            date.<span class="title function_">getMinutes</span>() +</span><br><span class="line">            <span class="string">":"</span> +</span><br><span class="line">            date.<span class="title function_">getSeconds</span>();</span><br><span class="line">          <span class="keyword">return</span> currentDate;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> file = option.<span class="property">file</span>;</span><br><span class="line">        <span class="keyword">const</span> point = file.<span class="property">name</span>.<span class="title function_">lastIndexOf</span>(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">let</span> suffix = file.<span class="property">name</span>.<span class="title function_">substr</span>(point);</span><br><span class="line">        <span class="keyword">let</span> fileName = file.<span class="property">name</span>.<span class="title function_">substr</span>(<span class="number">0</span>, point);</span><br><span class="line">        <span class="keyword">let</span> date = <span class="title function_">getFormatDate</span>();</span><br><span class="line">        <span class="keyword">let</span> fileNames = <span class="string">`<span class="subst">${fileName}</span>_<span class="subst">${date}</span><span class="subst">${suffix}</span>`</span>;</span><br><span class="line">        <span class="keyword">let</span> relativePath = <span class="string">"blog/"</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"oss客户端"</span>, client);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"文件"</span>, file);</span><br><span class="line">        <span class="comment">// 分片上传文件</span></span><br><span class="line">        <span class="keyword">let</span> ret = <span class="keyword">await</span> client.<span class="title function_">multipartUpload</span>(relativePath + fileNames, file, {</span><br><span class="line">          <span class="attr">progress</span>: <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">p</span>) {</span><br><span class="line">            <span class="keyword">let</span> e = {};</span><br><span class="line">            e.<span class="property">percent</span> = p * <span class="number">100</span>;</span><br><span class="line">            option.<span class="title function_">onProgress</span>(e);</span><br><span class="line">          },</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret.<span class="property">res</span>.<span class="property">statusCode</span> === <span class="number">200</span>) {</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"上传成功"</span>, ret);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          option.<span class="title function_">onError</span>(<span class="string">"上传失败"</span>);</span><br><span class="line">        }</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        option.<span class="title function_">onError</span>(<span class="string">"上传失败"</span>);</span><br><span class="line">      }</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<p><strong>全部代码</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"upload-demo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">action</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:http-request</span>=<span class="string">"fnUploadRequest"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">list-type</span>=<span class="string">"picture-card"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-preview</span>=<span class="string">"handlePictureCardPreview"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-remove</span>=<span class="string">"handleRemove"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"dialogVisible"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">:src</span>=<span class="string">"dialogImageUrl"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="variable constant_">OSS</span> <span class="keyword">from</span> <span class="string">"ali-oss"</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dialogImageUrl</span>: <span class="string">""</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dialogVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">disabled</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fileList</span>: [],</span></span><br><span class="line"><span class="language-javascript">    };</span></span><br><span class="line"><span class="language-javascript">  },</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleRemove</span>(<span class="params">file, fileList</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handlePictureCardPreview</span>(<span class="params">file</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">dialogImageUrl</span> = file.<span class="property">url</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">fnUploadRequest</span>(<span class="params">option</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"参数"</span>, option);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取OSS配置信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> client = <span class="keyword">new</span> <span class="title function_">OSS</span>({</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">secure</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">accessKeyId</span>: <span class="string">""</span>, <span class="comment">//阿里云AccessKey ID</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">accessKeySecret</span>: <span class="string">""</span>, <span class="comment">//阿里云accessKeySecret</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">bucket</span>: <span class="string">""</span>, <span class="comment">//bucket域名</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">region</span>: <span class="string">""</span>, <span class="comment">//oss地区，如：oss-cn-beijing。（注：不用加.aliyun.com）</span></span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getFormatDate</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> strDate = date.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">9</span>) {</span></span><br><span class="line"><span class="language-javascript">            month = <span class="string">"0"</span> + month;</span></span><br><span class="line"><span class="language-javascript">          }</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (strDate &gt;= <span class="number">0</span> &amp;&amp; strDate &lt;= <span class="number">9</span>) {</span></span><br><span class="line"><span class="language-javascript">            strDate = <span class="string">"0"</span> + strDate;</span></span><br><span class="line"><span class="language-javascript">          }</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> currentDate =</span></span><br><span class="line"><span class="language-javascript">            date.<span class="title function_">getFullYear</span>() +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">"-"</span> +</span></span><br><span class="line"><span class="language-javascript">            month +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">"-"</span> +</span></span><br><span class="line"><span class="language-javascript">            strDate +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">" "</span> +</span></span><br><span class="line"><span class="language-javascript">            date.<span class="title function_">getHours</span>() +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">":"</span> +</span></span><br><span class="line"><span class="language-javascript">            date.<span class="title function_">getMinutes</span>() +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">":"</span> +</span></span><br><span class="line"><span class="language-javascript">            date.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> currentDate;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> file = option.<span class="property">file</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> point = file.<span class="property">name</span>.<span class="title function_">lastIndexOf</span>(<span class="string">"."</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> suffix = file.<span class="property">name</span>.<span class="title function_">substr</span>(point);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> fileName = file.<span class="property">name</span>.<span class="title function_">substr</span>(<span class="number">0</span>, point);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> date = <span class="title function_">getFormatDate</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> fileNames = <span class="string">`<span class="subst">${fileName}</span>_<span class="subst">${date}</span><span class="subst">${suffix}</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> relativePath = <span class="string">"blog/"</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"oss客户端"</span>, client);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"文件"</span>, file);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 分片上传文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> ret = <span class="keyword">await</span> client.<span class="title function_">multipartUpload</span>(relativePath + fileNames, file, {</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">progress</span>: <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">p</span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> e = {};</span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">percent</span> = p * <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            option.<span class="title function_">onProgress</span>(e);</span></span><br><span class="line"><span class="language-javascript">          },</span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (ret.<span class="property">res</span>.<span class="property">statusCode</span> === <span class="number">200</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"上传成功"</span>, ret);</span></span><br><span class="line"><span class="language-javascript">        } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">          option.<span class="title function_">onError</span>(<span class="string">"上传失败"</span>);</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">      } <span class="keyword">catch</span> (error) {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span></span><br><span class="line"><span class="language-javascript">        option.<span class="title function_">onError</span>(<span class="string">"上传失败"</span>);</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  },</span></span><br><span class="line"><span class="language-javascript">};</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.home</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.upload-demo</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【LeetCode】重新排列句子中的单词</title>
    <url>/posts/rearrange-words-in-a-sentence/</url>
    <content><![CDATA[<p><a class="link" href="https://leetcode.cn/problems/rearrange-words-in-a-sentence/description/">【题目链接】3127.
重新排列句子中的单词 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="题目描述">题目描述</h3>
<p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 text
:</p>
<p>句子的首字母大写 text 中的每个单词都用单个空格分隔。 请你重新排列
text
中的单词，使所有单词按其长度的升序排列。<strong>如果两个单词的长度相同，则保留其在原句子中的相对顺序。</strong></p>
<p>请同样按上述格式返回新的句子。</p>
<h3 id="实现思路">实现思路</h3>
<ol type="1">
<li>将句子按照空格分割为数组</li>
<li>根据每个单词的长度进行升序排序</li>
<li>将第一项的首字母大写</li>
<li>将数组转换为字符串的格式返回</li>
</ol>
<h3 id="具体代码">具体代码</h3>
<p><strong>方法一</strong></p>
<p>这种是目前想出来最简单的解决方案，直接使用js的sort方法</p>
<blockquote>
<p>这里不同的JavaScript引擎实现的方法会有所不同，V8引擎（Chrome和Node.js使用的引擎）中使用的是Timsort算法，是一种稳定的排序算法。</p>
</blockquote>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrangeWords = <span class="keyword">function</span>(<span class="params">text</span>) {</span><br><span class="line">  <span class="keyword">const</span> textArr = text.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">' '</span>)</span><br><span class="line">  <span class="comment">// 直接使用sort方法进行排序   </span></span><br><span class="line">  textArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">length</span> - b.<span class="property">length</span>);</span><br><span class="line">  textArr[<span class="number">0</span>] = textArr[<span class="number">0</span>][<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + textArr[<span class="number">0</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> textArr.<span class="title function_">join</span>(<span class="string">' '</span>);</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<p><strong>方法二</strong></p>
<p>上面提到了稳定的排序算法，起因是一开始打算使用选择排序，发现不符合题目中“如果两个单词的长度相同，则保留其在原句子中的相对顺序。”的要求。</p>
<p>排序算法分为非稳定排序和稳定排序。</p>
<ul>
<li><strong>非稳定性排序</strong>
指在排序过程中，相等元素的相对位置可能会发生改变的排序算法。如果序列中有两个元素相等，经过非稳定排序后，它们的相对顺序可能与排序前不同。常见的非稳定性排序有：
<ul>
<li>快速排序</li>
<li>选择排序</li>
<li>堆排序</li>
</ul></li>
<li><strong>稳定性排序</strong>指在排序过程中，相等元素的相对位置保持不变的排序算法。如果序列中有两个元素相等，经过稳定排序后，它们的相对顺序与排序前相同。常见的稳定性排序有：
<ul>
<li>冒泡排序</li>
<li>插入排序</li>
<li>归并排序</li>
<li>计数排序</li>
<li>基数排序</li>
<li>桶排序</li>
</ul></li>
</ul>
<p>使用桶排序</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrangeWords = <span class="keyword">function</span>(<span class="params">text</span>) {</span><br><span class="line">  <span class="keyword">const</span> textArr = text.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">' '</span>)</span><br><span class="line">  <span class="keyword">const</span> buckets = {}</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> textArr) {</span><br><span class="line">    <span class="keyword">if</span> (buckets[item.<span class="property">length</span>]) {</span><br><span class="line">      buckets[item.<span class="property">length</span>].<span class="title function_">push</span>(item)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      buckets[item.<span class="property">length</span>] = [item]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(buckets).<span class="title function_">forEach</span>(<span class="function"><span class="params">keys</span> =&gt;</span> {</span><br><span class="line">    result = result.<span class="title function_">concat</span>(buckets[keys])</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  result[<span class="number">0</span>] = result[<span class="number">0</span>][<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + result[<span class="number">0</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">join</span>(<span class="string">' '</span>);</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>
<p><a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()
- JavaScript | MDN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://v8.dev/blog/array-sort#timsort">Getting things
sorted in V8 · V8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://zh.wikipedia.org/wiki/Timsort">Timsort -
维基百科，自由的百科全书 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Frontnd</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>【LeetCode】构造相同颜色的正方形</title>
    <url>/posts/make-a-square-with-the-same-color/</url>
    <content><![CDATA[<p><a class="link" href="https://leetcode.cn/problems/make-a-square-with-the-same-color/description/">【题目链接】3127.
构造相同颜色的正方形 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="题目描述">题目描述</h3>
<p>给你一个二维 3 x 3 的矩阵 grid ，每个格子都是一个字符，要么是 'B'
，要么是 'W' 。字符 'W' 表示白色，字符 'B' 表示黑色。</p>
<p>你的任务是改变 至多一个 格子的颜色，使得矩阵中存在一个 2 x 2
颜色完全相同的正方形。</p>
<p>如果可以得到一个相同颜色的 2 x 2 正方形，那么返回 true ，否则返回
false 。</p>
<h3 id="实现思路">实现思路</h3>
<ol type="1">
<li><strong>遍历所有可能的2x2正方形</strong></li>
</ol>
<ul>
<li>(0,0) 到 (1,1)</li>
<li>(0,1) 到 (1,2)</li>
<li>(1,0) 到 (2,1)</li>
<li>(1,1) 到 (2,2)</li>
</ul>
<ol start="2" type="1">
<li><strong>统计每个2x2正方形中'B'和'W'的数量</strong></li>
</ol>
<p>如果B或W的数量大于等于3（因为测试案例中还有4格都是'B'或'W'的情况）那么就符合条件</p>
<h3 id="具体代码">具体代码</h3>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 辅助函数：检查给定的 2x2 正方形是否可以通过改变一个格子来使其颜色完全相同</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkSquare</span> = (<span class="params">x, y</span>) =&gt; {</span><br><span class="line">    <span class="keyword">let</span> countB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> countW = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计 2x2 正方形中 'B' 和 'W' 的数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = x; i &lt; x + <span class="number">2</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = y; j &lt; y + <span class="number">2</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] === <span class="string">'B'</span>) {</span><br><span class="line">                countB++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                countW++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 判断是否可以通过改变一个格子来满足条件,大于3是因为有可能</span></span><br><span class="line">    <span class="keyword">return</span> countB &gt;= <span class="number">3</span> || countW &gt;= <span class="number">3</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有可能的 2x2 正方形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">checkSquare</span>(i, j)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有找到符合条件的 2x2 正方形，返回 false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Frontnd</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>信院成绩录入辅助系统使用教程</title>
    <url>/posts/9495/</url>
    <content><![CDATA[<h1 id="成绩表格式规范">成绩表格式规范</h1>
<p>百分比成绩表与5档成绩表的excel文件有些许不同，请注意格式规范</p>
<h2 id="百分比成绩表">百分比成绩表</h2>
<p>一共四列从左至右依次为：学号、姓名、平时成绩、期末成绩。</p>
<p>学生顺序最好以成绩录入网站的顺序为主，excel文件可随意命名。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20220609103323.png"></p>
<h2 id="档成绩表">5档成绩表</h2>
<p>一共四列从左至右依次为：学号、姓名、平时成绩、期末成绩。</p>
<p>成绩录入为：优秀-良好-中等-及格-不及格。</p>
<p>学生顺序最好以成绩录入网站的顺序为主，excel文件可随意命名。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20220616102626.png"></p>
<h1 id="插件使用指南">插件使用指南</h1>
<p>下图为成绩录入辅助系统的主页面，选择excel文件的成绩表（5档与百分比均可）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20220616101811.png"></p>
<p>上传成功后插件底部出现上传的文件名，请老师根据需求以及上传的文件选择录入方式，选择后成绩即录入成功。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20220616101854.png"></p>
<h1 id="注意事项">注意事项</h1>
<ul>
<li>excel文件不可打开多个工作表，请在上传前确认当前excel文件中只有一个工作表。
<img lazyload="" src="/images/loading.svg" data-src="https://jhao413.oss-cn-beijing.aliyuncs.com/blog/20220616102125.png"></li>
<li>如遇到成绩录入无响应时，请刷新页面重试，若问题任未解决请联系作者反馈。</li>
<li>请各位老师在编辑成绩表时，注意在文档前后不要出现合并单元格等非必要的格式，否则在读取时也会算作一行数据。（不会对录入成绩造成影响，仅在最后弹窗提醒时可能出现统计录入数据条数出错）</li>
</ul>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>wangeditor</title>
    <url>/posts/28431/</url>
    <content><![CDATA[<h2 id="wangeditor基本使用">wangeditor基本使用</h2>
<p>最近做公安项目的时候需要做一个富文本编辑器实现文章编辑，图片上传等功能。一开始选择了quill，但是做到最后在图片上传的时候出现了跨域的问题（现在回想起来应该是当时后端接口没有写好），当时就想换个别的富文本编辑器试试，最后找到了wangeditor，主要看上了它的轻量，中文文档等等。</p>
<h5 id="vue中安装wangeditor">1、vue中安装wangEditor</h5>
<p>使用npm安装：npm install wangeditor --save</p>
<h5 id="创建公共组件">2、创建公共组件</h5>
<p>在components中创建wangEnduit.vue文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template lang="html"&gt;</span><br><span class="line">  &lt;div class="editor"&gt;</span><br><span class="line">    &lt;div ref="toolbar" class="toolbar"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ref="editor" class="text"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import E from 'wangeditor'</span><br><span class="line">  export default {</span><br><span class="line">    name: 'editoritem',</span><br><span class="line">    data() {</span><br><span class="line">      return {</span><br><span class="line">        // uploadPath,</span><br><span class="line">        editor: null,</span><br><span class="line">        info_: null</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    model: {</span><br><span class="line">      prop: 'value',</span><br><span class="line">      event: 'change'</span><br><span class="line">    },</span><br><span class="line">    props: {</span><br><span class="line">      value: {</span><br><span class="line">        type: String,</span><br><span class="line">        default: ''</span><br><span class="line">      },</span><br><span class="line">      isClear: {</span><br><span class="line">        type: Boolean,</span><br><span class="line">        default: false</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    watch: {</span><br><span class="line">      isClear(val) {</span><br><span class="line">        // 触发清除文本域内容</span><br><span class="line">        if (val) {</span><br><span class="line">          this.editor.txt.clear()</span><br><span class="line">          this.info_ = null</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      value: function(value) {</span><br><span class="line">        if (value !== this.editor.txt.html()) {</span><br><span class="line">          this.editor.txt.html(this.value)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      //value为编辑框输入的内容，这里我监听了一下值，当父组件调用得时候，如果给value赋值了，子组件将会显示父组件赋给的值</span><br><span class="line">    },</span><br><span class="line">    mounted() {</span><br><span class="line">      this.seteditor()</span><br><span class="line">      this.editor.txt.html(this.value)</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">      seteditor() {</span><br><span class="line">        this.editor = new E(this.$refs.toolbar, this.$refs.editor)</span><br><span class="line">        console.log(this.editor);</span><br><span class="line">      //editor.config这里我使用的是wangeditor4，如果你使用的是wangeditor3将editor.config改为editor.customConfig即可</span><br><span class="line">        this.editor.config.uploadImgShowBase64 = false // base 64 存储图片</span><br><span class="line">        this.editor.config.uploadImgServer = 'http://127.0.0.1:8081/upload/img'// 配置服务器端地址</span><br><span class="line">        this.editor.config.uploadImgHeaders = { }// 自定义 header</span><br><span class="line">        this.editor.config.uploadFileName = 'img' // 后端接受上传文件的参数名</span><br><span class="line">        this.editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 将图片大小限制为 2M</span><br><span class="line">        this.editor.config.uploadImgMaxLength = 6 // 限制一次最多上传 3 张图片</span><br><span class="line">        this.editor.config.uploadImgTimeout = 3 * 60 * 1000 // 设置超时时间</span><br><span class="line"></span><br><span class="line">        // 配置菜单</span><br><span class="line">        this.editor.config.menus = [</span><br><span class="line">          'head', // 标题</span><br><span class="line">          'bold', // 粗体</span><br><span class="line">          'fontSize', // 字号</span><br><span class="line">          'fontName', // 字体</span><br><span class="line">          'italic', // 斜体</span><br><span class="line">          'underline', // 下划线</span><br><span class="line">          'strikeThrough', // 删除线</span><br><span class="line">          'foreColor', // 文字颜色</span><br><span class="line">          'backColor', // 背景颜色</span><br><span class="line">          'link', // 插入链接</span><br><span class="line">          'list', // 列表</span><br><span class="line">          'justify', // 对齐方式</span><br><span class="line">          'quote', // 引用</span><br><span class="line">          'emoticon', // 表情</span><br><span class="line">          'image', // 插入图片</span><br><span class="line">          'table', // 表格</span><br><span class="line">          'video', // 插入视频</span><br><span class="line">          'code', // 插入代码</span><br><span class="line">          'undo', // 撤销</span><br><span class="line">          'redo', // 重复</span><br><span class="line">          'fullscreen' // 全屏</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        this.editor.config.uploadImgHooks = {</span><br><span class="line">          fail: (xhr, editor, result) =&gt; {</span><br><span class="line">            // 插入图片失败回调</span><br><span class="line">          },</span><br><span class="line">          success: (xhr, editor, result) =&gt; {</span><br><span class="line">            // 图片上传成功回调</span><br><span class="line">          },</span><br><span class="line">          timeout: (xhr, editor) =&gt; {</span><br><span class="line">            // 网络超时的回调</span><br><span class="line">          },</span><br><span class="line">          error: (xhr, editor) =&gt; {</span><br><span class="line">            // 图片上传错误的回调</span><br><span class="line">          },</span><br><span class="line">          customInsert: (insertImg, result, editor) =&gt; {</span><br><span class="line">            // 图片上传成功，插入图片的回调</span><br><span class="line">            //result为上传图片成功的时候返回的数据，这里我打印了一下发现后台返回的是data：[{url:"路径的形式"},...]</span><br><span class="line">            // console.log(result.data[0].url)</span><br><span class="line">            //insertImg()为插入图片的函数</span><br><span class="line">             //循环插入图片</span><br><span class="line">            // for (let i = 0; i &lt; 1; i++) {</span><br><span class="line">              console.log(result.data.url)</span><br><span class="line">              let url = result.data.url</span><br><span class="line">              insertImg(url)</span><br><span class="line">            // }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        this.editor.config.onchange = (html) =&gt; {</span><br><span class="line">          this.info_ = html // 绑定当前逐渐地值</span><br><span class="line">          this.$emit('change', this.info_) // 将内容同步到父组件中</span><br><span class="line">        }</span><br><span class="line">        // 创建富文本编辑器</span><br><span class="line">        this.editor.create()</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="css"&gt;</span><br><span class="line">  .editor {</span><br><span class="line">    width: 100%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    position: relative;</span><br><span class="line">    z-index: 0;</span><br><span class="line">  }</span><br><span class="line">  .toolbar {</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">  }</span><br><span class="line">  .text {</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    min-height: 500px;</span><br><span class="line">  }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<h5 id="在父组件中调用">3.在父组件中调用</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;editor-bar v-model="detail" :isClear="isClear" @change="change"&gt;&lt;/editor-bar&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import EditorBar from '../components/wangEnduit'</span><br><span class="line">export default {</span><br><span class="line">components: { EditorBar },</span><br><span class="line">data() {</span><br><span class="line">      return {</span><br><span class="line">        isClear: false,</span><br><span class="line">        detail:""</span><br><span class="line">        }</span><br><span class="line">      },  </span><br><span class="line">methods: {</span><br><span class="line">  change(val) {</span><br><span class="line">      console.log(val)</span><br><span class="line">      </span><br><span class="line">    },</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>到这里前端代码就完成了，接下来是后端代码</p>
<h5 id="nodejs代码">4、nodejs代码</h5>
<p>下面是我所使用的包</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">"cors"</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">"multer"</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> bodyParse = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置图片存储路径</span></span><br><span class="line"><span class="keyword">var</span> storage = multer.<span class="title function_">diskStorage</span>({</span><br><span class="line">  <span class="attr">destination</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) {</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">'./images'</span>);</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">filename</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) {</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">${<span class="built_in">Date</span>.now()}</span>-<span class="subst">${file.originalname}</span>`</span>)</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加配置文件到muler对象。</span></span><br><span class="line"><span class="keyword">var</span> upload = <span class="title function_">multer</span>({</span><br><span class="line">  <span class="attr">storage</span>: storage</span><br><span class="line">});</span><br><span class="line"><span class="keyword">var</span> imgBaseUrl = <span class="string">'../'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 application/x-www-form-urlencoded 解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.<span class="title function_">urlencoded</span>({</span><br><span class="line">  <span class="attr">extended</span>: <span class="literal">false</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取路由中间件对象</span></span><br><span class="line"><span class="keyword">let</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line">server.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//图片，express设置文件相对路径</span></span><br><span class="line">server.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">'images'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line">server.<span class="title function_">all</span>(<span class="string">'*'</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) {</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild'</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">'OPTIONS'</span>) {</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="number">200</span>);</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件上传请求处理，upload.array 支持多文件上传，第二个参数是上传文件数目</span></span><br><span class="line">.<span class="title function_">post</span>(<span class="string">'/upload/img'</span>, upload.<span class="title function_">array</span>(<span class="string">'img'</span>, <span class="number">2</span>), <span class="keyword">function</span> (<span class="params">req, res</span>) {</span><br><span class="line">    <span class="comment">// 读取上传的图片信息</span></span><br><span class="line">    <span class="keyword">var</span> files = req.<span class="property">files</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置返回结果</span></span><br><span class="line">    <span class="keyword">var</span> result = {};</span><br><span class="line">    <span class="keyword">if</span> (!files[<span class="number">0</span>]) {</span><br><span class="line">      result.<span class="property">code</span> = <span class="number">1</span>;</span><br><span class="line">      result.<span class="property">errMsg</span> = <span class="string">'上传失败'</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      result.<span class="property">code</span> = <span class="number">0</span>;</span><br><span class="line">      result.<span class="property">data</span> = {</span><br><span class="line">        <span class="attr">url</span>: <span class="string">"http://127.0.0.1:8081"</span> + files[<span class="number">0</span>].<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">"images"</span>)[<span class="number">1</span>]</span><br><span class="line">      }</span><br><span class="line">      result.<span class="property">errMsg</span> = <span class="string">'上传成功'</span>;</span><br><span class="line">    }</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result));</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">use</span>(router);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"服务已运行在：http://127.0.0.1:8081/"</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure></div>
<p>大功告成~</p>
<p>这里可以参考两篇文章：</p>
<p>https://blog.csdn.net/qq_33594380/article/details/80164381</p>
<p>https://blog.csdn.net/ciwei0605/article/details/104402138</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>避免 Day.js 与 UTC 时区的常见陷阱</title>
    <url>/posts/2/</url>
    <content><![CDATA[<p>在前端开发中，我们通常使用 Day.js
来格式化从后端传递过来的时间数据。后端传来的时间通常是标准的 UTC
格式，例如：</p>
<ul>
<li>2015-09-01T14:55:00+00:00
<ul>
<li>2015-09-01 表示日期，格式为 YYYY-MM-DD</li>
<li>T 是日期和时间的分隔符</li>
<li>14:55:00 表示时间，格式为 HH:MM:SS</li>
<li>+00:00 表示时区偏移，+00:00 代表 UTC 时间
因为之前公司一直都是把本地时间直接存UTC时区+00:00，但这种做法存在不规范之处——在不同的时区查看时间时可能会出现错误。实际上，更为标准的做法是将本地时间按照当地时区（如
+08:00）存储。</li>
</ul></li>
</ul>
<p>由于之前的习惯，前端代码通常是这样来格式化时间的：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">dayjs.<span class="title function_">utc</span>(item.<span class="property">filledOn</span>).<span class="title function_">format</span>(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure></div>
<p>这段代码的假设前提是所有存储的时间都是 UTC
时间。因此，当我们遇到如下时间格式时：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-08-26T09:56:45.403258+08:00</span><br></pre></td></tr></table></figure></div>
<p>这时使用 dayjs.utc() 进行格式化，就会导致时间被错误地减去 8
小时。这种错误应该在时间存储时统一规避，以避免前端展示错误的时间信息。当然在前端处理时间信息时，也应该多注意时区的格式和时区问题。</p>
<p><a class="link" href="https://day.js.org/docs/zh-CN/parse/utc">UTC·Day.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6">协调世界时·维基百科 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Frontnd</category>
      </categories>
      <tags>
        <tag>Frontnd</tag>
      </tags>
  </entry>
</search>
